<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAAAAAAAD/2wBDAAkGBxITEhUSExIVFRUWFRUWFxUVFRcXFRYWFRUWFxUWFRUY
        HSggGBolHRUVITEhJSkrLi4uGB8zODMsNygtLiv/2wBDAQoKCg4NDhsQEBorJSAlLS0tLi0tLS0tLS0t
        LS0tLS0tLS0tLSstLS0tLS0tLS0tLS0tLS0tLS0tLSstLS0tLS3/wAARCACoASwDASIAAhEBAxEB/8QA
        HAAAAQUBAQEAAAAAAAAAAAAABAABAgMFBgcI/8QARBAAAQMDAgMFBQYEAwUJAAAAAQACEQMEIRIxBUFR
        BhNhcaEHIoGR8BQyUrHB0SMzQmIVovFDcoLS4RYXJSY1c5Kys//EABkBAAMBAQEAAAAAAAAAAAAAAAID
        BAEABf/EAC0RAAICAgIBAgUDBAMAAAAAAAABAhEDIRIxQQQTFCJRYYFxkbFC0eHxMqHB/9oADAMBAAIR
        AxEAPwDySoEOWop7gqYXpS2SxZBrUVQtdShTprb4XTEJmHHydMVly8Vox7my0iUHC6u/ogNK5qrTysz4
        eL0dgy81sqUC1XtYiaNvKSsXIc5pGakirihBVAalSg06DUk0QSVopqL2QscXR1ogmTpkASEkkkuNEkkk
        uOHCRTpisNGSSSWmCSSSXHDpJInh1m6rUbTaJLiAEUYtukA2krZC3oFxgBEPtC3de08G9mLadHJmoRJ8
        +i4HtXw/uS5pxBhWRxRS07IV6vnKl0ceUwCW5RlGhKGMOTKZSoHa1SLVe9oCp3THFLQKdkQxWi3KIt6Y
        G6tqEIowVAyk0AOpwq9JRNQjqqHP8UE0gotjsYfFXNB+gqqQb+L0W5YcOpuYHE7pmHG5aRk3RzRKTSrH
        sVSibaHKmFUnq5t1p2KCbKd1NMWSS6FuCfYXUv3O3KTIKA0lWMeQiWZt/Mc8aS0X1ICnQrBCPJ5qDSQu
        92no7haNSrSkTGNp5SIkT8R8wgnUwptujEId78o8k4vZkItBtvRlQuaKe2rxuqbi5kopThwBSlyIdwh6
        jIR9pWHNU3pE4SMkIuHJDYyfKmBpJ0lKOsYKTglpPRJdRtiTFSCiVxr6GSTpLgbGThJTpjIWpWY2WMoF
        dJ2GqNpXLKjtmuCzHEBqGo3BaZCvUI42iWd5ItH1S/jNu2j3pqNDYncfl1Xzn2z4v9puKjx90uOkeCCr
        8Ye5ukuMdJwsmo8rvkxpqLuxOHDLlyl4LabEb3waIQ1sMJqgnl9eKyORRWip4nLsRfqKJZTAE4QzGHor
        iDzWc/qFwa6IVLjp9eSh9pPWE7mHf1VQp/FB7kvBrxrtiNUnmomqc+8rW0X9YUm2zt5GeZIH/VY3I5Je
        AU1jIg5G0cloWnEK1NullUAbwCf2VIeQN8dBH5JnVz1XRcl5NcUVPcqgFdpThqFqxd0W0AFKpCgGqTaa
        auqFvuxu6lF2dkHKNOijrZhCoxY1e0JyTdaYDe2oahqFME5C2bmnKBNEg7LcmOpWjceT5dsvHDmxKzrm
        i2fdRr7h8QhO7MygyRi6pDsc5JPk0TteGPqbBRvuDVKYkjC1eG3ZpyR6q+94g5wIKf7GKUN9krzZVk0l
        Ry1vQc4wBlWXdsWGDuj7G57qprIlVcZum1XaxjwUsscFj72Uqc3kqtfUyi1RhGUi2DO8YQxCklFKmUJk
        ScARsnBwlCQCAIYJlMBQKwJ9DKbaZOVEK5tUgQiil5Ad+CoNV1CnJA6qVoBmeittHe+09DKdjgtNgSk9
        nVjso9lEVXj3Ylc1UtC58NHNd5x/tq2rbNoMGYA2XL8Pq6TqO/RejKEZUjzsU8iTlIHdwFzW6ihhZwcw
        uluuJ6mxssN7CSsz4saVQG+lzZG7mg2ysw4dAmuWsZj9E9vcCmENcVg47JKhBR12WyyyvfRXSOp2AtCp
        ZjTMen6IW3Poj33J04GBuc45ZPJUY8cOOyHLlny0ZNWl1/JStwBy9EnkuOASYJI6ACT6AoZ5Pkp3FJ2U
        Rk5LZoVnNA2HyygawLtmnwhu+Y/f5KsOW7wSg6qQxgEgbExGep5SfVdGPuOh0Uoo5w0D+E/L66ogcOqf
        gd8l1PE+xN8xwe6idBIy1wP5LXtuydzpGGNxs6oAfkix4Iu7lo6T+iPMiVOmoIq3apIq2Kk6QgExqQra
        wgILcpkvlAjsOpVijbWqSsxoEKVGrBTIZGmrAlBNaNi4qgITv0PWJPNVUWZ3TJZW2DDEkjSJxsmbWbMG
        FOZEAt+cIKrbNGZBP+8tlkcWqQyGKMk7ZpOotIxBVpt2iZ07EwfLzQ/COJNouM0p1AAy5pIyDLZb7pxu
        Fp399avok91UDzsQ5umOmyphKLjfkjnCSlXj8GI5wAEs+9sZ+o3QnErPuSJg6hyRFrcOY4HS5zA6YMEe
        GYVFy4nWWj3XGIOS0YM+WSp8ji4/cphGSlrr9Sqjah4c5uzBJBImJjCDeB4om0lskgQQRsD+Hlywd0PS
        kTgEEEZHVSzppaKI3b2VQPFMI8VucA7J3t7AtqD6jZy8+7SbnM1HHTPMgSfBdKzsPw22/wDUeLU9YwaF
        mDVeD0L4dB82DzUkpJMeos8/eRO56qswvSRxrs5b/wAvhtzcuGA+u+Gu8dOuP8gU6ftKsW/y+z9m3oSa
        ZPz7hBb+gT/U82os1GBGyWhem/8AehZO/mcBtHDwNOR5TQ/VHWvEuzV5ipZ1bNxEa2Ahgnn/AAi5u/Nz
        ITIu9UwWvued8F4Oa5IDgA0T4n9h4qm5pidLYPKQvSeK+y2rTpuuOHXAu6LmmGtLe9j+1zPdq7GQNJ5A
        ErzOmx2qIggkEEQRG89CIKthLG4JRW/JK4zU229eDWfwzudMuBJG6nZ2OuSTCEfWMNDQSYyYkmfyAR3C
        azQ6ausCcgQD8lZHhdVoklzUbvZJ9ifxYVVS0a0A6t1qcSvqX+zpmOpcJ9fNZraWozt5uB/Rdl4R6C9P
        HJN7Kfs4MZ/NTNu0fRWpRY0DZvxKEuGDOR8EiO+kXTx8VtoqYGAEHJ5b/lCtNcta5rXODXgagCQHQdQD
        gN4PVUjyU3DwTuSSJHjbYHUA5HlOx67bKBpF3MDzkfornt8YQsNnLnfBTZJlWPG0XCz5l45df25LW4Bc
        U7eprc8EDeCSSJ6AdY9Fhuez+4/srqxYARpeKk5mIgtBgxsZ3H7JUcjTtDuOtnrd77VLMUtLQXOgYLTH
        5LmLrt3Qe7VBEjaDj0XnVSTy9FAsPPHnKGGbh1H+f7h+3fkr0oiiYWxdcKGYEQhWWiasEos873oyQK8y
        hzTK1vsqvqcLeAHOY4A7EggfNG8EmCsyRglpUqdElbzeGGJ0mPJRNpCz4VrbN+IXgxn0yFBlFy3zaA7q
        TbALX6dmr1CMqhZmJMgeChVo5xJ81uiiQIyE9GzztODP7pnsro1ZX2Z7KJqkAUzqG5nfpIOArLgGmNAc
        XtgiCB7hPz+gtm3a6mQWMydp/qzthX17clpc5o945I/pOTB9d84TljVfcV7juqVHOWxqODaTGkAkEkxp
        yQ3UTyHJK/ruaNDcS3S/Dc+Hqt9mtkw2Igx73u7Q7Jkb+qVO2dcvZRpt1VKjiB937xjYxhoiSekla41H
        s5PlPpHM22vX3dMAuqaWQC0hznkRpJjTJIHgtZ/DLjhVZr72xa9r2VBTp1KjHMJlvvPFJztQH4SRM7rq
        OL2lOhXoWNvodUpPpipdFrS59wXNAxsKdOMN6zzkuJ9ovC74V7Snc3TK7qmtjHNotZoa51NrpA+9uD8F
        I7coq6Tv9fwVUkm6OC432rvLpuirVLaYgNo0/wCFbhn4e6bgjoXTCwjS93VEAu056hoJ5bZXsZ9i9YAt
        +20QCZ/ku5T/AH+K47t52AuOHtD3uZUpvlrXsBEP0k6XNOxIDiMnYpMfak+MWN+bto4urbkQYIBE5BH9
        UeHRRp0CZjkJX0x277Ju4jZ29NtZtLuy2pLm6gf4RbESPxLyLsJ2Aur9prNcyhRyBVeNWpww7QwRqA2J
        JAnrBAVj4Sjylqgpcr0cPSpl3LDRHjv+a6/hXZm9dY1r+mKXc6KheS6HxSkPhkRODC3+P+ze7saX2mjW
        p3FNsl5azQ5oO79JLg5vUzjpEkdT2XLv+zdcmJ7u78vvPhN5KMVLG+3QmuUnGa1RwnY/iV9w1rLxoBt6
        haatLVJdTccPLdg7Ih2+wOJXVe1rg9MNpcVtQNNcNbV0jDhUbNOtHWMHrLfGeFHGq5pdy94NNsAN0swA
        ZAmJIEDnyHQL1S9rFvZym6pBPd0C2QIg12FkDb7pC2UXjnGV7uvwCpc4yVeL/J468VGkObiRzGyDpd4X
        SGknLpIPIEn9V1Y4w50YGOob+UQFbSvSZw3/AOIXovGpeSCOXJH+lWc7UsXn3jJknGRzxy2UatuZ91uk
        DzM+IJXavqn7paDjlthSbTECG5zO22I+O/oj9mDF/EZU7o4+nw9xHOfJObFw5Ls6bB0Cf7K08kXswRnx
        Ob+o46nav6H5K821TofVddTsR09FP/Dzgx6T6LfbghfxORs4WrZP6fmhv8OM5B+S7qpw4dDPkgqtiByK
        B4YMbH1GU5F/Dx0+fqrm2w5jz5yumFhqmGkbJP4LONLufL5ckt4oLophkyvs5M02BwOkYIMHIOdiOYVv
        F7eh3ru41mlPud40ao6GPktStwuDBB+vgmPCz0cl+2iuM5UWXVywzGUFT0rDN6VOndlF8UmyD4dpHR2p
        YHsLtg4T5Lt+JXFEUHF5BaQIHXpC8q+1FQddnqieeIqXpnJ9nqlW/t+5guaZI05CwuJ1KDi2IPvTj8K4
        cXZUmXrguXqYrwbH0jXk7K7ZRLmkREZgfJVU+6DieS5J9+7qk28d1S5epjekPh6aVdnYvp6yCdkqVBoJ
        z1XO0OJujSSpPvOjiVzyp7GRwSWjqBbB0ZPjAmMjbqr722a4AAEkZjTA258h/wBVz1vfPpxU906pxqaT
        8QMhQq8RcTJBzvEc89E1SRixTb0blayZHuuJ/wCHcjEH8Prsuk7BcP8As7Lu9Lc0qJ7vAy4tLnf/AFaJ
        /uK8/pcQc0A6TvIMDlG2F6F7PKhubDiFu3+YQYHXvKRDP8zD6pXqZpYv2/axuKElM4/hU/aaJG5q0tZM
        EuJqN1OOOcrvfalH2zh8/jP/AOtHC8st+Lmm9r2NLXNLXQWzlsESD4hdT2r7c0bytZ1m0qjTRJ7xjgD/
        AF03HQQfew07xywsyq80ZLpJ/wADIuou/sbntvpNc+21AGGVt/F1OVf29M8AtZzLLWSc/wCw3k8/Fcx7
        Se11C+dRdRZVHdNqBxe0NjWWEbEz90p+03bK3r8Lt7JjKoqU224cXNAYe7p6HQ4OnfbAU8ISUMSa6e/3
        YcpK5bOm9szAbC0mP5jd/wD2H7LTq21oeCWtO4rvo0H0bfU+mDLi5geWuhrsOdJON1zFD2kWFe1p0OI2
        j6j6YGWtY5jnNaW62y9pa4iZEczkrO7G9v6VK0FjxGga1AN91wDXQ2Z0vY4iQ0iQ4ZGMYlKUJrGlT+V3
        /oJyjffaOs7N8Y4NZUKlsy9fUp1S4ltWm8gam6XBobSAAPMIfsuz/wAt1hj+VdePN657tF2r4O21q29n
        YF7quNb26dDm/ddqLjUJaTgCBuJ3WN2f7eCjw24sKtJ7hUZV7qozT7pqAyKgcRjVJkTvEYWuFq0ndp7r
        x/sG99rp9E+xXZGpfVgAC2g0/wAWpGAPwMPN59Jk8ger9rvGmO7vh1AgClpdUDQNLYaW06XwBkj/AHVz
        1L2puo2FGztabmPbT0vru04Mme6aCROfvO+XNcOb4SSQSXGSXe8SSSSS45kzJPNMTc8nOfS6X/oDVR4r
        t9m1Rto3IJz/AEoulT8AfJq50X5MANmOUfPEp21zO2enkc4lV+9BE3sTfk7R9wDENb8WZz4kKz7X1j0H
        6LlKd/UMDS34tA2nn8SlcVXggOA5fdLY9Ci96NWjI4JXTZ2NKu3fBgqx18M7D4riRfEDfPTphVOvTnJ8
        cj90PxCQz4W/P/R6BS4i0ETEc4ImFc7izTtEcsiSvO2Xh/EfTb5qYvnfiPou9+LB+DS8neVOIN+iENVv
        GdP8w+Wy41t4f6nOieWmfhKRu+rz8uXhlLl6hFOP00Udpa3dKcjp9TCMN3TwIzn9fBcJQuoIMl24gggd
        JwZkHPw+Cm65cJ9/rGR8Myg92x6gkde+rS5EA4gycf5UbbXFID+nfm1pPzcFwFrxJ8n3zJAEamiZzBOr
        aY5HZbVC8dpHvkeT6f8AzJdymWqcEujgoVjAqtasY5AqPGdl4YolqkKqrfUTW0LVlrWBSbSQ4eiKD1qa
        ZztDvpjmlT7vmp1moRxXSSiwoNvybTG0g2S0keapdWpEiGx5mFmm5dtyU9cgCcb+ExE+a1zTekgoqSW2
        zpOF2DazsGntkav0BWzfcJpMouqCpSES3Scu+A6rkba5YwEgkHq0K2vctc1xk4HNPXCvFieWXl26I07s
        uLabTq97A2C3uxHbL7Fdte+BQcO6qBsYb7pFSJkkEg+Ic6JMLjHvx7pJgjYdQVG4Y1rYBLidJcIG5jE5
        O8qaclKFPoriny2z2ntp7PjcE3vDnscKw1uphzdNTVB10amw1bkSAdwRsfIrulWt6mivSfReS4aajdBM
        bxqjUM4OxWp2M7d3dg7TTfqoE5oVJc0kxOg70zk7YzkFen8M9sXDbhui6pPozghzO+pE+BYC4/Fg3Uiy
        5IfL2h/FNX0eI1L2cguzDufXHnt9YQzrwxg9PT/Ur6Ca/sxXz/4bnqKVI56g6TKI/wAB7ODOjh/malOP
        Vyx+rf0M9pHzlRqzuforTt6FxcGKNOtWdGk90xz+sA6J8N+S97o3nZyidVM8OBHOm2i93wLASqOJe17h
        lERT72tgQKVLSIO2apZjyRL1GTjqLBeON7Z53wX2VcTrx3rWWrJBmo4OfgQNNNk/Jzmr0fgPs34fYN+0
        XDxWewS6rcFraTOpFP7ozmXaiOq4jjftvuXgi1tqdIfjqu7x0dQ0aWtPnqXnHHePXd27VdXD6vMBzgGN
        PVtNsNb8AEtvLPt0EuEegK1q4yQPdPxMbH5p2P8AL5wqWs+pCTAfmPBN5vyjPyaBc4BroZkbiJ3nIBxu
        FocHtG1XwX02gn+ucfEBZFHnufH85RlpuYEwDPhCpg06sTJSV06Zt8S4MKeQ5hA5hxgg4HLwKxamOTT5
        OH7Ip9ZuxBBEg+Y3QVZgnZMyKHgDHLL1J2F0KjSD/BJjJIMwJiSYwJIHxCrq3FGCBThDMxty+v1V9JzT
        MtBPLwz6oEk/oNlkl5spDmnZvqrWgc2+pRlGznkUQ+wdGycsNqyd+padGLUePw+pTXNanqdoa4Mk6Q90
        vA5aiAATjkAjK1m6CdO31sga1HqD44SZQobHK2O2uARIIPjKKp3LDEugefqgnFxcXEuLiSSTJJJ3JJ3K
        kGvB58uX11S0hvNhlKs0CNQ0xMRmfj57rct+I0o/nxJMyD5TjyXNd4+c59P2RFK4cBAbPz/dNi66BcpM
        ydSkKiHLkg9QczuIV3iWpVteoOqI+RnEIa9FW6ALsK62uYRwmk9gSi60aFwfFAueqq9wXJW7ZIytnk5O
        kbDHS2EU2cztKtfcAgNEqdxVGnTIQdOsG5kLpLi9MbBqS2jXs6IqAt0lxkEgeCt4lQ90ltMtAEHB9Sh+
        H9o6tIy2M/2oi/7Z1nUjRwGkzsJPxVHvY+GyVYsnuaWv1ManVefcbzMxzJ6qFZzg3T90GJHMxGfNCNrO
        mZ9c/WVfWrgsjn9ZUcs2tX/grhjVttpf3KGk5ifHylQDk/eQoApbZyFq+vjKTWeSZSphCtms0bOQPkd+
        hVVZ50wPEH5g5PwCtt8BQdUgOHVXtfJRMv8AkC6zAHQk/MAH8lEE7cvr9lApBRciiibWk7dE7R4/XmoB
        6cLrR1fUJphzQDkTjzRdmHEyJM7xzlZzn4CIsOIvpOBaYKfDLFVfQMoPwaVzRAy5pHUmVQ2s3pj1V93x
        p1TJOUA6vO/5JuXJB9M7FjkntV/Aa6mwj3T9eKoa2PmmoFu888jqlUaOuUmLkt2UzjGSqjSsqpBEOg+i
        1XcSECQMDJkGTJyMYG2MrkpI5q43RhVR9TGtkEvSys2q3EGn6CCqXQPOPiB+azDXznZVPdJwpsmVMqhh
        YTXd9GP0VttQe7Pw3E7eKBa9adhxFjQdTcxAwTGZnBGeWcZQY5xcvmehrxuiRquBLZdP/D6ogNmSSd/x
        MQNa5pl8gmCMwJO3QkfXVN9tZ1d8h+6cnjd7AcH9DHcoyncmAULBQ4JUlNrVAoqMG1KTQU2lXMcIXJfU
        5/YrqFRYTKTyp0Tld2zekGstC0aigqu+FpvvJbCBcWzmYg7RMxjflMT4I8so2oxCxwdcpE6RLvgq7im4
        5IStqmVuXhZ3fwQZcqSSG4PT87k30c7TZlO8pnPVRK5tJUierY6SaUkARJWUgq1fRTMa2DLoMp7JU41Z
        SacKqovQbpImqym9jUYQ8qyoq3FQZHcmyiCpUMpsKgkClp0EWuaohh3TBynTeibTOit7HAIUy8lPUcIU
        GPWPrQyOnssAwqi4hEB4hVvasUrGyi1srFRTyoAK1qJfcV8xAqMomkSA4BjXa26ZLSXNyDqZ0diJzglD
        BqGUb6DUmuyYU2N8R5Zz5JmNVrQOnyQqOxvLRB1NRNI+KTymbcdQfg6B8oKKgOS8gxSlMSmXExPWnaVW
        nldZ1FziqiU0plrdnLQ8pw5RKZZZpYaiiSkAnhYbuh2OhTqXBIiVSnKxhRk6pDSmSSWgCSSSXHEmomih
        2omknYlsCYS0Kt6tCqcVbLoQuwaoFSUS8odyhyKmPiyKZOmSgx5TymTLjiepNKYpBacWBxT60wTraR3N
        obUVaypCgE5CLicptBlOsPJO5g+Kz3JMeUNBc7Dg0z+wHqFZTf8A6gCEIKvgE5emcbM9wtqunf0AVTbe
        cifRVPf4BV96RssSV7Oc7K06SSUYJMkkuOEnSSXGjKVNsmEklknSChG5JG1acKkSUFe22gpJKDFllLJT
        PZz+nhHDaQCU0pJK88QSSSS4wSSSS44m1E00klRi7FzL5VTykkqZPQtFL3KlxSSUeR7HRIpJJJQQkkkl
        pw8pBJJcaWApEpklp3gWpSDkkltsxIZyi1JJYma0WApiUkkbYCRBxUEkktsNI//Z
</value>
  </data>
</root>